# CCU CI/CD Configuration
# This file manages the complete CI/CD pipeline configuration

# Project CI/CD Settings
project:
  name: "{project_name}"
  type: "{project_type}"  # web-app, api, mobile, library
  created: "{timestamp}"
  ccu_version: "2.0.0"

# Deployment Strategy
strategy:
  type: "{strategy_type}"  # simple, standard, custom
  description: "{strategy_description}"

  # Branch Flow Configuration
  flow:
    simple:
      branches:
        - main -> production
      auto_deploy: false
      requires_approval: true

    standard:
      branches:
        - worktree/* -> main
        - main -> staging
        - staging -> production
      auto_deploy:
        staging: true
        production: false
      requires_approval:
        staging: false
        production: true

    custom:
      # User-defined flow
      branches: []
      rules: []

# Platform Configuration
platform:
  provider: "{platform}"  # github, gitlab, bitbucket, jenkins
  detected_from: "{remote_url}"

  github:
    workflows_path: .github/workflows/
    use_environments: true
    use_deployments_api: true
    enable_packages: false

  gitlab:
    config_file: .gitlab-ci.yml
    use_environments: true
    use_review_apps: false

  bitbucket:
    config_file: bitbucket-pipelines.yml
    use_deployments: true

# Worktree Integration
worktree:
  enabled: true
  auto_features:
    create_pr_on_push: true
    link_to_issues: true
    auto_delete_after_merge: true
    generate_pr_description: true

  branch_patterns:
    - pattern: "feature/*"
      target_branch: main
      pr_template: feature-pr-template.md

    - pattern: "module/*"
      target_branch: main
      pr_template: module-pr-template.md

    - pattern: "bugfix/*"
      target_branch: main
      pr_template: bugfix-pr-template.md

    - pattern: "hotfix/*"
      target_branch: production
      pr_template: hotfix-pr-template.md
      fast_track: true

# Environment Configurations
environments:
  development:
    branch: ["feature/*", "module/*", "bugfix/*"]
    deployment_type: local
    url: "http://localhost:3000"
    variables:
      NODE_ENV: development
      DEBUG: true

  staging:
    branch: main
    deployment_type: "{deployment_type}"  # vercel, aws, heroku, ssh
    url: "{staging_url}"
    auto_deploy: true
    health_check: "/health"
    variables:
      NODE_ENV: staging
      API_URL: "{staging_api_url}"
    secrets:
      - STAGING_DATABASE_URL
      - STAGING_API_KEY
      - STAGING_JWT_SECRET
    pre_deploy:
      - run_tests: true
      - security_scan: true
    post_deploy:
      - smoke_tests: true
      - notify_team: true

  production:
    branch: production
    deployment_type: "{deployment_type}"
    url: "{production_url}"
    auto_deploy: false
    requires_approval: true
    approval_count: 2
    health_check: "/health"
    variables:
      NODE_ENV: production
      API_URL: "{production_api_url}"
    secrets:
      - PRODUCTION_DATABASE_URL
      - PRODUCTION_API_KEY
      - PRODUCTION_JWT_SECRET
      - SENTRY_DSN
    pre_deploy:
      - staging_validation: true
      - backup_current: true
      - run_tests: true
      - security_audit: true
    post_deploy:
      - smoke_tests: true
      - performance_monitoring: true
      - notify_team: true
      - create_release: true
    rollback:
      enabled: true
      automatic_on_failure: false
      keep_backups: 5

# Branch Protection Rules
branch_protection:
  main:
    protect: true
    required_reviews: 1
    dismiss_stale_reviews: true
    require_up_to_date: true
    required_checks:
      - "CI / Code Quality"
      - "CI / Test Suite"
      - "CI / Build Verification"
    restrictions:
      users: []
      teams: []
    allow_force_pushes: false
    allow_deletions: false

  staging:
    protect: true
    required_reviews: 0
    required_checks:
      - "CI / Status"
    allow_force_pushes: false
    allow_deletions: false

  production:
    protect: true
    required_reviews: 2
    dismiss_stale_reviews: true
    require_code_owner_reviews: true
    required_checks:
      - "CI / Status"
      - "Staging Tests / All Tests"
    restrictions:
      users: ["lead-dev", "devops"]
      teams: ["senior-engineers"]
    allow_force_pushes: false
    allow_deletions: false

# Testing Configuration
testing:
  unit:
    enabled: true
    command: "npm run test:unit"
    coverage_threshold: 80

  integration:
    enabled: true
    command: "npm run test:integration"

  e2e:
    enabled: true
    command: "npm run test:e2e"
    environments: ["staging", "production"]

  smoke:
    enabled: true
    command: "npm run test:smoke"
    environments: ["production"]
    critical_paths:
      - "/login"
      - "/api/health"
      - "/dashboard"

  performance:
    enabled: false
    command: "npm run test:performance"
    environments: ["staging"]

  security:
    enabled: true
    command: "npm audit"
    severity_threshold: "moderate"

# Notifications
notifications:
  slack:
    enabled: false
    webhook_url: "${SLACK_WEBHOOK}"
    channels:
      deployments: "#deployments"
      failures: "#alerts"

  email:
    enabled: false
    recipients:
      - "devops@example.com"

  github:
    enabled: true
    create_issues_on_failure: true
    comment_on_pr: true

# Automation Rules
automation:
  auto_merge:
    dependabot: true
    requires_all_checks: true

  stale_branches:
    enabled: true
    days_before_stale: 30
    days_before_delete: 60
    exempt_labels: ["keep", "in-progress"]

  release_notes:
    enabled: true
    template: "release-notes-template.md"
    categories:
      - title: "Features"
        labels: ["feature", "enhancement"]
      - title: "Bug Fixes"
        labels: ["bug", "bugfix"]
      - title: "Maintenance"
        labels: ["chore", "dependencies"]

# Deployment Providers Configuration
deployment_providers:
  vercel:
    project_name: "{vercel_project}"
    team: "{vercel_team}"
    regions: ["sfo1"]

  aws:
    s3_bucket: "{bucket_name}"
    cloudfront_distribution: "{cf_id}"
    region: "us-east-1"

  heroku:
    app_name: "{heroku_app}"
    region: "us"

  ssh:
    host: "{ssh_host}"
    user: "{ssh_user}"
    path: "{deployment_path}"

  kubernetes:
    cluster: "{k8s_cluster}"
    namespace: "{k8s_namespace}"
    deployment: "{k8s_deployment}"

# Monitoring and Observability
monitoring:
  sentry:
    enabled: false
    dsn: "${SENTRY_DSN}"
    environment_mapping: true

  datadog:
    enabled: false
    api_key: "${DATADOG_API_KEY}"

  custom:
    webhook_url: "${MONITORING_WEBHOOK}"
    events:
      - deployment_started
      - deployment_completed
      - deployment_failed
      - rollback_initiated

# Feature Flags
feature_flags:
  provider: none  # none, launchdarkly, flagsmith, custom
  sync_with_environments: true

# Backup Configuration
backup:
  enabled: true
  providers:
    - type: "database"
      schedule: "before_production_deploy"
      retention_days: 30
    - type: "files"
      paths: ["/uploads", "/data"]
      schedule: "before_production_deploy"
      retention_days: 14

# Security Policies
security:
  dependency_scanning:
    enabled: true
    schedule: "on_pr"
    block_on_critical: true

  secret_scanning:
    enabled: true
    patterns:
      - "api[_-]?key"
      - "secret"
      - "token"
      - "password"

  sast:
    enabled: false
    provider: "github"  # github, sonarcloud, custom

  container_scanning:
    enabled: false
    registries: []

# Compliance and Governance
compliance:
  change_log:
    required: true
    format: "conventional"  # conventional, keepachangelog

  approval_matrix:
    production:
      min_approvers: 2
      required_roles: ["senior-dev", "devops"]

  audit_trail:
    enabled: true
    retention_days: 365

# Version Management
versioning:
  strategy: "semver"  # semver, date, custom
  auto_tag: true
  tag_pattern: "v{version}"
  bump_on:
    major: ["breaking"]
    minor: ["feature"]
    patch: ["fix", "bugfix"]